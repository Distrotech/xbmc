<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="classXBMCAddon_1_1xbmcgui_1_1Dialog" kind="class" prot="public">
    <compoundname>XBMCAddon::xbmcgui::Dialog</compoundname>
    <basecompoundref refid="classXBMCAddon_1_1AddonClass" prot="public" virt="non-virtual">XBMCAddon::AddonClass</basecompoundref>
    <includes refid="Dialog_8h" local="no">Dialog.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a743361915295da2dbf45a05988ff7e7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>XBMCAddon::xbmcgui::Dialog::Dialog</definition>
        <argsstring>()</argsstring>
        <name>Dialog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="44" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1aea14f8a132db6f09a14812eb43e9d1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>XBMCAddon::xbmcgui::Dialog::~Dialog</definition>
        <argsstring>()</argsstring>
        <name>~Dialog</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="45" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1adafc617d8c147baf82c894aa1a3b310c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcgui::Dialog::yesno</definition>
        <argsstring>(const String &amp;heading, const String &amp;line1, const String &amp;line2=emptyString, const String &amp;line3=emptyString, const String &amp;nolabel=emptyString, const String &amp;yeslabel=emptyString)</argsstring>
        <name>yesno</name>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line1</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line2</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line3</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>nolabel</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>yeslabel</declname>
          <defval>emptyString</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>yesno(heading, line1[, line2, line3]) <ndash/> Show a dialog &apos;YES/NO&apos;.</para><para>heading : string or unicode - dialog heading. line1 : string or unicode - line #1 text. line2 : [opt] string or unicode - line #2 text. line3 : [opt] string or unicode - line #3 text. nolabel : [opt] label to put on the no button. yeslabel : [opt] label to put on the yes button.</para><para>*Note, Returns True if &apos;Yes&apos; was pressed, else False.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>ret = dialog.yesno(&apos;XBMC&apos;, &apos;Do you want to exit this script?&apos;)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="67" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="28" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a5c0e07ed2288f907a6a006bb498abe11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int XBMCAddon::xbmcgui::Dialog::select</definition>
        <argsstring>(const String &amp;heading, const std::vector&lt; String &gt; &amp;list, int autoclose=0)</argsstring>
        <name>select</name>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const std::vector&lt; String &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>autoclose</declname>
          <defval>0</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>select(heading, list) <ndash/> Show a select dialog.</para><para>heading : string or unicode - dialog heading. list : string list - list of items. autoclose : [opt] integer - milliseconds to autoclose dialog. (default=do not autoclose)</para><para>*Note, Returns the position of the highlighted item as an integer.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>ret = dialog.select(&apos;Choose a playlist&apos;, [&apos;Playlist #1&apos;, &apos;Playlist #2, &apos;Playlist #3&apos;])<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="82" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="61" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ad06502ada19626b307a8af40a60e4be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcgui::Dialog::ok</definition>
        <argsstring>(const String &amp;heading, const String &amp;line1, const String &amp;line2=emptyString, const String &amp;line3=emptyString)</argsstring>
        <name>ok</name>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line1</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line2</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>line3</declname>
          <defval>emptyString</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ok(heading, line1[, line2, line3]) <ndash/> Show a dialog &apos;OK&apos;.</para><para>heading : string or unicode - dialog heading. line1 : string or unicode - line #1 text. line2 : [opt] string or unicode - line #2 text. line3 : [opt] string or unicode - line #3 text.</para><para>*Note, Returns True if &apos;Ok&apos; was pressed, else False.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>ok = dialog.ok(&apos;XBMC&apos;, &apos;There was an error.&apos;)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="100" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="88" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1aa55c461be7f7a183e97f66d97b032abb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classXBMCAddon_1_1Alternative" kindref="compound">Alternative</ref>&lt; String, std::vector&lt; String &gt; &gt;</type>
        <definition>Alternative&lt; String, std::vector&lt; String &gt; &gt; XBMCAddon::xbmcgui::Dialog::browse</definition>
        <argsstring>(int type, const String &amp;heading, const String &amp;s_shares, const String &amp;mask=emptyString, bool useThumbs=false, bool treatAsFolder=false, const String &amp;defaultt=emptyString, bool enableMultiple=false)</argsstring>
        <name>browse</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>s_shares</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>mask</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useThumbs</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>treatAsFolder</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>defaultt</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enableMultiple</declname>
          <defval>false</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>browse(type, heading, shares[, mask, useThumbs, treatAsFolder, default, enableMultiple]) <ndash/> Show a &apos;Browse&apos; dialog.</para><para>type : integer - the type of browse dialog. heading : string or unicode - dialog heading. shares : string or unicode - from sources.xml. (i.e. &apos;myprograms&apos;) mask : [opt] string or unicode - &apos;|&apos; separated file mask. (i.e. &apos;.jpg|.png&apos;) useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist. treatAsFolder : [opt] boolean - if True playlists and archives act as folders. default : [opt] string - default path or file.</para><para>enableMultiple : [opt] boolean - if True multiple file selection is enabled. Types: 0 : ShowAndGetDirectory 1 : ShowAndGetFile 2 : ShowAndGetImage 3 : ShowAndGetWriteableDirectory</para><para>*Note, If enableMultiple is False (default): returns filename and/or path as a string to the location of the highlighted item, if user pressed &apos;Ok&apos; or a masked item was selected. Returns the default value if dialog was canceled. If enableMultiple is True: returns tuple of marked filenames as a strin if user pressed &apos;Ok&apos; or a masked item was selected. Returns empty tuple if dialog was canceled.</para><para>If type is 0 or 3 the enableMultiple parameter is ignore</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>fn = dialog.browse(3, &apos;XBMC&apos;, &apos;files&apos;, &apos;&apos;, False, False, False, &apos;special://masterprofile/script_data/XBMC Lyrics&apos;) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="135" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="114" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a00787656fd82414b71c43bde966fd042" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcgui::Dialog::browseSingle</definition>
        <argsstring>(int type, const String &amp;heading, const String &amp;shares, const String &amp;mask=emptyString, bool useThumbs=false, bool treatAsFolder=false, const String &amp;defaultt=emptyString)</argsstring>
        <name>browseSingle</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>shares</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>mask</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useThumbs</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>treatAsFolder</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>defaultt</declname>
          <defval>emptyString</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>browse(type, heading, shares[, mask, useThumbs, treatAsFolder, default]) <ndash/> Show a &apos;Browse&apos; dialog.</para><para>type : integer - the type of browse dialog. heading : string or unicode - dialog heading. shares : string or unicode - from sources.xml. (i.e. &apos;myprograms&apos;) mask : [opt] string or unicode - &apos;|&apos; separated file mask. (i.e. &apos;.jpg|.png&apos;) useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist (default=false). treatAsFolder : [opt] boolean - if True playlists and archives act as folders (default=false). default : [opt] string - default path or file.</para><para>Types: 0 : ShowAndGetDirectory 1 : ShowAndGetFile 2 : ShowAndGetImage 3 : ShowAndGetWriteableDirectory</para><para>*Note, Returns filename and/or path as a string to the location of the highlighted item, if user pressed &apos;Ok&apos; or a masked item was selected. Returns the default value if dialog was canceled.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>fn = dialog.browse(3, &apos;XBMC&apos;, &apos;files&apos;, &apos;&apos;, False, False, &apos;special://masterprofile/script_data/XBMC Lyrics&apos;)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="165" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="127" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ab429653c457367d3f67b6fc76a4eea34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; String &gt;</type>
        <definition>std::vector&lt; String &gt; XBMCAddon::xbmcgui::Dialog::browseMultiple</definition>
        <argsstring>(int type, const String &amp;heading, const String &amp;shares, const String &amp;mask=emptyString, bool useThumbs=false, bool treatAsFolder=false, const String &amp;defaultt=emptyString)</argsstring>
        <name>browseMultiple</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>shares</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>mask</declname>
          <defval>emptyString</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useThumbs</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>treatAsFolder</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>defaultt</declname>
          <defval>emptyString</defval>
        </param>
        <exceptions> throw (WindowException)</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>browse(type, heading, shares[, mask, useThumbs, treatAsFolder, default]) <ndash/> Show a &apos;Browse&apos; dialog.</para><para>type : integer - the type of browse dialog. heading : string or unicode - dialog heading. shares : string or unicode - from sources.xml. (i.e. &apos;myprograms&apos;) mask : [opt] string or unicode - &apos;|&apos; separated file mask. (i.e. &apos;.jpg|.png&apos;) useThumbs : [opt] boolean - if True autoswitch to Thumb view if files exist (default=false). treatAsFolder : [opt] boolean - if True playlists and archives act as folders (default=false). default : [opt] string - default path or file.</para><para>Types: 1 : ShowAndGetFile 2 : ShowAndGetImage</para><para>*Note, returns tuple of marked filenames as a string," if user pressed &apos;Ok&apos; or a masked item was selected. Returns empty tuple if dialog was canceled.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>fn = dialog.browseMultiple(2, &apos;XBMC&apos;, &apos;files&apos;, &apos;&apos;, False, False, &apos;special://masterprofile/script_data/XBMC Lyrics&apos;)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="193" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="152" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ad63ecd042f6d0643767010743720b9c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcgui::Dialog::numeric</definition>
        <argsstring>(int type, const String &amp;heading, const String &amp;defaultt=emptyString)</argsstring>
        <name>numeric</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>heading</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>defaultt</declname>
          <defval>emptyString</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>numeric(type, heading[, default]) <ndash/> Show a &apos;Numeric&apos; dialog.</para><para>type : integer - the type of numeric dialog. heading : string or unicode - dialog heading. default : [opt] string - default value.</para><para>Types: 0 : ShowAndGetNumber (default format: #) 1 : ShowAndGetDate (default format: DD/MM/YYYY) 2 : ShowAndGetTime (default format: HH:MM) 3 : ShowAndGetIPAddress (default format: #.#.#.#)</para><para>*Note, Returns the entered data as a string. Returns the default value if dialog was canceled.</para><para>example:<itemizedlist>
<listitem><para>dialog = xbmcgui.Dialog()</para></listitem><listitem><para>d = dialog.numeric(1, &apos;Enter date of birth&apos;)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="216" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.cpp" bodystart="181" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classXBMCAddon_1_1xbmcgui_1_1Dialog" kindref="compound">Dialog</ref> class (Duh!) </para>    </detaileddescription>
    <inheritancegraph>
      <node id="266">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
      </node>
      <node id="265">
        <label>XBMCAddon::xbmcgui::Dialog</label>
        <link refid="classXBMCAddon_1_1xbmcgui_1_1Dialog"/>
        <childnode refid="266" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="268">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
        <childnode refid="269" relation="usage">
          <edgelabel>languageHook</edgelabel>
        </childnode>
      </node>
      <node id="267">
        <label>XBMCAddon::xbmcgui::Dialog</label>
        <link refid="classXBMCAddon_1_1xbmcgui_1_1Dialog"/>
        <childnode refid="268" relation="public-inheritance">
        </childnode>
      </node>
      <node id="269">
        <label>XBMCAddon::LanguageHook</label>
        <link refid="classXBMCAddon_1_1LanguageHook"/>
        <childnode refid="268" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" line="41" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/Dialog.h" bodystart="40" bodyend="218"/>
    <listofallmembers>
      <member refid="classXBMCAddon_1_1AddonClass_1ab70ccb0c1ca2f4099577e9ca59ae8f49" prot="public" virt="virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>Acquire</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a3ec5b6d08299a5b8913967c855e536c0" prot="protected" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>AddonClass</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a0a75a3b4efb4b2ac3c995465e9b9e6a9" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>AddonClass</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1aa55c461be7f7a183e97f66d97b032abb" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>browse</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ab429653c457367d3f67b6fc76a4eea34" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>browseMultiple</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a00787656fd82414b71c43bde966fd042" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>browseSingle</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1afd73e0ec1af35bf37e3e54971d23abd0" prot="protected" virt="virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>deallocating</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a743361915295da2dbf45a05988ff7e7b" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>Dialog</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a5006d4fc03ec77770e5e06e8b112ee60" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>GetClassname</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a42cb67038af10d4b53c2e7a13ee22591" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>GetLanguageHook</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a218a8226c7ef2f361af6671a5f25efd0" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>isDeallocating</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1aa71b56d06a92152c726833de1308405e" prot="protected" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>languageHook</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ad63ecd042f6d0643767010743720b9c4" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>numeric</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1ad06502ada19626b307a8af40a60e4be7" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>ok</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a5c5ab8cbc38921ad05e9a853f1e52493" prot="public" virt="virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>Release</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1a5c0e07ed2288f907a6a006bb498abe11" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>select</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1adafc617d8c147baf82c894aa1a3b310c" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>yesno</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1ae27cdf6c5fab63f5d09e965e1573fce7" prot="public" virt="virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>~AddonClass</name></member>
      <member refid="classXBMCAddon_1_1xbmcgui_1_1Dialog_1aea14f8a132db6f09a14812eb43e9d1eb" prot="public" virt="virtual"><scope>XBMCAddon::xbmcgui::Dialog</scope><name>~Dialog</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
