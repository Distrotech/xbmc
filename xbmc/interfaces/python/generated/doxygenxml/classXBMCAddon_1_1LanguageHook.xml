<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="classXBMCAddon_1_1LanguageHook" kind="class" prot="public" abstract="yes">
    <compoundname>XBMCAddon::LanguageHook</compoundname>
    <basecompoundref refid="classXBMCAddon_1_1AddonClass" prot="public" virt="non-virtual">XBMCAddon::AddonClass</basecompoundref>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a6a4fb90f284dfb2b52a92abb7a18e9c1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>XBMCAddon::LanguageHook::LanguageHook</definition>
        <argsstring>(const char *subclassName)</argsstring>
        <name>LanguageHook</name>
        <param>
          <type>const char *</type>
          <declname>subclassName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="46" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="46" bodyend="46"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a09863e584d25483d5d19ce5cc7584df9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>XBMCAddon::LanguageHook::~LanguageHook</definition>
        <argsstring>()</argsstring>
        <name>~LanguageHook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="49" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.cpp" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a3edd048f08daaa87a67575fd01a94f80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::DelayedCallOpen</definition>
        <argsstring>()</argsstring>
        <name>DelayedCallOpen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the scripting language needs special handling for calls that block or are delayed in any other means, this should be overloaded.</para><para>In Python when control is passed to a native method that blocks, you need to allow other threads in Python to run by using Py_BEGIN_ALLOW_THREADS. This is the place to put that functionality </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="61" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a439036971813dcd9eff9aaa817c483e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::DelayedCallClose</definition>
        <argsstring>()</argsstring>
        <name>DelayedCallClose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the scripting language needs special handling for calls that block or are delayed in any other means, this should be overloaded.</para><para>In Python when control is passed to a native method that blocks, you need to allow other threads in Python to run by using Py_BEGIN_ALLOW_THREADS. When that delayed method ends you need to restore the Python thread state using Py_END_ALLOW_THREADS. This is the place to put that functionality </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="75" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a79650091ce0a5d953e222fb365fa6a9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::MakePendingCalls</definition>
        <argsstring>()</argsstring>
        <name>MakePendingCalls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="77" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a950013b7896d99a0301b01c8bdef5648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classXBMCAddon_1_1CallbackHandler" kindref="compound">CallbackHandler</ref> *</type>
        <definition>virtual CallbackHandler* XBMCAddon::LanguageHook::GetCallbackHandler</definition>
        <argsstring>()</argsstring>
        <name>GetCallbackHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For scripting languages that need a global callback handler, this method should be overloaded to supply one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="83" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a5d905698a17f8b97501bf845af0e3c0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::Constructing</definition>
        <argsstring>(AddonClass *beingConstructed)</argsstring>
        <name>Constructing</name>
        <param>
          <type><ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> *</type>
          <declname>beingConstructed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a callback method that can be overriden to receive a callback when an <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> that has this language hook is on is being constructed. It is called from the constructor of <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> so the implementor cannot assume the subclasses have been built or that calling a virtual function on the <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> will work as expected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="92" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a719f1ecc3be19a31497474b84bb8a512" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::Destructing</definition>
        <argsstring>(AddonClass *beingDestructed)</argsstring>
        <name>Destructing</name>
        <param>
          <type><ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> *</type>
          <declname>beingDestructed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is a callback method that can be overriden to receive a callback when an <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> that has this language hook is on is being destructed. It is called from the destructor of <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> so the implementor should assume the subclasses have been torn down and that calling a virtual function on the <ref refid="classXBMCAddon_1_1AddonClass" kindref="compound">AddonClass</ref> will not work as expected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="101" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a2e8621a73e0f74a1d277b01c28307670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>String</type>
        <definition>virtual String XBMCAddon::LanguageHook::GetAddonId</definition>
        <argsstring>()</argsstring>
        <name>GetAddonId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method should be done a different way but since the only other way I can think to do it requires an InheritableThreadLocal C++ equivalent, I&apos;m going to defer to this technique for now.</para><para>Currently (for python) the scripting languge has the Addon id injected into it as a global variable. Therefore the only way to retrieve it is to use scripting language specific calls. So until I figure out a better way to do this, this is how I need to retrieve it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="113" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1ad1aa8f2d06a9a14002f805d0f21f6732" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>String</type>
        <definition>virtual String XBMCAddon::LanguageHook::GetAddonVersion</definition>
        <argsstring>()</argsstring>
        <name>GetAddonVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="114" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a6ab6dff84387d2c0c5657b056933fa9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::RegisterPlayerCallback</definition>
        <argsstring>(IPlayerCallback *player)=0</argsstring>
        <name>RegisterPlayerCallback</name>
        <param>
          <type>IPlayerCallback *</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="116"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a136c78ee96de7b248e4b061f460a8310" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::UnregisterPlayerCallback</definition>
        <argsstring>(IPlayerCallback *player)=0</argsstring>
        <name>UnregisterPlayerCallback</name>
        <param>
          <type>IPlayerCallback *</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="117"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a78a95f133d0c09b26e275f9f07918527" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::RegisterMonitorCallback</definition>
        <argsstring>(XBMCAddon::xbmc::Monitor *player)=0</argsstring>
        <name>RegisterMonitorCallback</name>
        <param>
          <type><ref refid="classXBMCAddon_1_1xbmc_1_1Monitor" kindref="compound">XBMCAddon::xbmc::Monitor</ref> *</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="118"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a709f18ae44d2232ef4150a29afc2c1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void XBMCAddon::LanguageHook::UnregisterMonitorCallback</definition>
        <argsstring>(XBMCAddon::xbmc::Monitor *player)=0</argsstring>
        <name>UnregisterMonitorCallback</name>
        <param>
          <type><ref refid="classXBMCAddon_1_1xbmc_1_1Monitor" kindref="compound">XBMCAddon::xbmc::Monitor</ref> *</type>
          <declname>player</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="119"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a534c93da86e33c093e26ab4525bdd0e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool XBMCAddon::LanguageHook::WaitForEvent</definition>
        <argsstring>(CEvent &amp;hEvent, unsigned int milliseconds)=0</argsstring>
        <name>WaitForEvent</name>
        <param>
          <type>CEvent &amp;</type>
          <declname>hEvent</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="120"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1ab3dd5ccc8c85f2fadea367bb8c89c5d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XBMCAddon::LanguageHook::SetLanguageHook</definition>
        <argsstring>(LanguageHook *languageHook)</argsstring>
        <name>SetLanguageHook</name>
        <param>
          <type><ref refid="classXBMCAddon_1_1LanguageHook" kindref="compound">LanguageHook</ref> *</type>
          <declname>languageHook</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="122" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.cpp" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1aa8c6b6712160f9e809f6946b159e2173" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classXBMCAddon_1_1LanguageHook" kindref="compound">LanguageHook</ref> *</type>
        <definition>LanguageHook * XBMCAddon::LanguageHook::GetLanguageHook</definition>
        <argsstring>()</argsstring>
        <name>GetLanguageHook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="123" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1LanguageHook_1a74340258219d94d49f607662f983b190" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XBMCAddon::LanguageHook::ClearLanguageHook</definition>
        <argsstring>()</argsstring>
        <name>ClearLanguageHook</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="124" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.cpp" bodystart="48" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="326">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
      </node>
      <node id="325">
        <label>XBMCAddon::LanguageHook</label>
        <link refid="classXBMCAddon_1_1LanguageHook"/>
        <childnode refid="326" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="328">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
        <childnode refid="327" relation="usage">
          <edgelabel>languageHook</edgelabel>
        </childnode>
      </node>
      <node id="327">
        <label>XBMCAddon::LanguageHook</label>
        <link refid="classXBMCAddon_1_1LanguageHook"/>
        <childnode refid="328" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" line="44" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/LanguageHook.h" bodystart="43" bodyend="125"/>
    <listofallmembers>
      <member refid="classXBMCAddon_1_1AddonClass_1ab70ccb0c1ca2f4099577e9ca59ae8f49" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>Acquire</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a3ec5b6d08299a5b8913967c855e536c0" prot="protected" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>AddonClass</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a0a75a3b4efb4b2ac3c995465e9b9e6a9" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>AddonClass</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a74340258219d94d49f607662f983b190" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>ClearLanguageHook</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a5d905698a17f8b97501bf845af0e3c0a" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>Constructing</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1afd73e0ec1af35bf37e3e54971d23abd0" prot="protected" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>deallocating</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a439036971813dcd9eff9aaa817c483e0" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>DelayedCallClose</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a3edd048f08daaa87a67575fd01a94f80" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>DelayedCallOpen</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a719f1ecc3be19a31497474b84bb8a512" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>Destructing</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a2e8621a73e0f74a1d277b01c28307670" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>GetAddonId</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1ad1aa8f2d06a9a14002f805d0f21f6732" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>GetAddonVersion</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a950013b7896d99a0301b01c8bdef5648" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>GetCallbackHandler</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a5006d4fc03ec77770e5e06e8b112ee60" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>GetClassname</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1aa8c6b6712160f9e809f6946b159e2173" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>GetLanguageHook</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a218a8226c7ef2f361af6671a5f25efd0" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>isDeallocating</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1aa71b56d06a92152c726833de1308405e" prot="protected" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>languageHook</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a6a4fb90f284dfb2b52a92abb7a18e9c1" prot="protected" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>LanguageHook</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a79650091ce0a5d953e222fb365fa6a9d" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>MakePendingCalls</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a78a95f133d0c09b26e275f9f07918527" prot="public" virt="pure-virtual"><scope>XBMCAddon::LanguageHook</scope><name>RegisterMonitorCallback</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a6ab6dff84387d2c0c5657b056933fa9b" prot="public" virt="pure-virtual"><scope>XBMCAddon::LanguageHook</scope><name>RegisterPlayerCallback</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a5c5ab8cbc38921ad05e9a853f1e52493" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>Release</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1ab3dd5ccc8c85f2fadea367bb8c89c5d3" prot="public" virt="non-virtual"><scope>XBMCAddon::LanguageHook</scope><name>SetLanguageHook</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a709f18ae44d2232ef4150a29afc2c1be" prot="public" virt="pure-virtual"><scope>XBMCAddon::LanguageHook</scope><name>UnregisterMonitorCallback</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a136c78ee96de7b248e4b061f460a8310" prot="public" virt="pure-virtual"><scope>XBMCAddon::LanguageHook</scope><name>UnregisterPlayerCallback</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a534c93da86e33c093e26ab4525bdd0e0" prot="public" virt="pure-virtual"><scope>XBMCAddon::LanguageHook</scope><name>WaitForEvent</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1ae27cdf6c5fab63f5d09e965e1573fce7" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>~AddonClass</name></member>
      <member refid="classXBMCAddon_1_1LanguageHook_1a09863e584d25483d5d19ce5cc7584df9" prot="public" virt="virtual"><scope>XBMCAddon::LanguageHook</scope><name>~LanguageHook</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
