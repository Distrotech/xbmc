<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="classXBMCAddon_1_1xbmcaddon_1_1Addon" kind="class" prot="public">
    <compoundname>XBMCAddon::xbmcaddon::Addon</compoundname>
    <basecompoundref refid="classXBMCAddon_1_1AddonClass" prot="public" virt="non-virtual">XBMCAddon::AddonClass</basecompoundref>
    <includes refid="Addon_8h" local="no">Addon.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a35819fa4077fe906852810c2e6f13378" prot="private" static="no" mutable="no">
        <type>ADDON::AddonPtr</type>
        <definition>ADDON::AddonPtr XBMCAddon::xbmcaddon::Addon::pAddon</definition>
        <argsstring></argsstring>
        <name>pAddon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="53" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a87a86d2605a977110aa26a35b964c065" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcaddon::Addon::getDefaultId</definition>
        <argsstring>()</argsstring>
        <name>getDefaultId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="55" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a17a6801e1b23f1b375231f94b3a17f4d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcaddon::Addon::getAddonVersion</definition>
        <argsstring>()</argsstring>
        <name>getAddonVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="57" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="38" bodyend="38"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a2d966feaa0a60148231bc3dbbcd15d6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>XBMCAddon::xbmcaddon::Addon::Addon</definition>
        <argsstring>(const char *id=NULL)</argsstring>
        <name>Addon</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">Addon</ref> class.</para><para>Addon([id]) <ndash/> Creates a new <ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">Addon</ref> class.</para><para>id : [opt] string - id of the addon as specified in addon.xml<linebreak/>
 *Note, specifying the addon id is not needed.<linebreak/>
 Important however is that the addon folder has the same name as the addon id provided in addon.xml.<linebreak/>
 You can optionally specify the addon id from another installed addon to retrieve settings from it.</para><para>example:<itemizedlist>
<listitem><para>self.Addon = xbmcaddon.Addon()</para></listitem><listitem><para>self.Addon = <ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">xbmcaddon.Addon</ref>(&apos;script.foo.bar&apos;) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="75" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="40" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1aa2da0222eb71dfc5816ecb1031edca68" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>XBMCAddon::xbmcaddon::Addon::~Addon</definition>
        <argsstring>()</argsstring>
        <name>~Addon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="77" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1ad71eb7d9fb09b9f598f51d41684eb7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcaddon::Addon::getLocalizedString</definition>
        <argsstring>(int id)</argsstring>
        <name>getLocalizedString</name>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getLocalizedString(id) <ndash/> Returns an addon&apos;s localized &apos;unicode string&apos;.</para><para>id : integer - id# for string you want to localize.</para><para>example:<itemizedlist>
<listitem><para>locstr = self.Addon.getLocalizedString(32000) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="87" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1af5f9d34edde325b181c73296549cf4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcaddon::Addon::getSetting</definition>
        <argsstring>(const char *id)</argsstring>
        <name>getSetting</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getSetting(id) <ndash/> Returns the value of a setting as a unicode string.</para><para>id : string - id of the setting that the module needs to access.</para><para>example:<itemizedlist>
<listitem><para>apikey = self.Addon.getSetting(&apos;apikey&apos;) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="97" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1ab2360178f9b5ed6aa962c050ee2b28aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XBMCAddon::xbmcaddon::Addon::setSetting</definition>
        <argsstring>(const char *id, const String &amp;value)</argsstring>
        <name>setSetting</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>setSetting(id, value) <ndash/> Sets a script setting.</para><para>id : string - id of the setting that the module needs to access. value : string or unicode - value of the setting.</para><para>*Note, You can use the above as keywords for arguments.</para><para>example:<itemizedlist>
<listitem><para>self.Settings.setSetting(id=&apos;username&apos;, value=&apos;teamxbmc&apos;)<linebreak/>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="110" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="74" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a54738130dcd49aa5029c05ae52954c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void XBMCAddon::xbmcaddon::Addon::openSettings</definition>
        <argsstring>()</argsstring>
        <name>openSettings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a54738130dcd49aa5029c05ae52954c23" kindref="member">openSettings()</ref> <ndash/> Opens this scripts settings dialog.</para><para>example:<itemizedlist>
<listitem><para>self.Settings.openSettings() </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="118" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="100" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a38b04545f72570c0273c9c6be0083c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>String</type>
        <definition>String XBMCAddon::xbmcaddon::Addon::getAddonInfo</definition>
        <argsstring>(const char *id)</argsstring>
        <name>getAddonInfo</name>
        <param>
          <type>const char *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>getAddonInfo(id) <ndash/> Returns the value of an addon property as a string.</para><para>id : string - id of the property that the module needs to access.</para><para>*Note, choices are (author, changelog, description, disclaimer, fanart. icon, id, name, path,<linebreak/>
 profile, stars, summary, type, version)</para><para>example:<itemizedlist>
<listitem><para>version = self.Addon.getAddonInfo(&apos;version&apos;) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="131" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.cpp" bodystart="108" bodyend="142"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">Addon</ref> class.</para><para>Addon([id]) <ndash/> Creates a new <ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">Addon</ref> class.</para><para>id : [opt] string - id of the addon as specified in addon.xml</para><para>*Note, specifying the addon id is not needed.<linebreak/>
 Important however is that the addon folder has the same name as the addon id provided in addon.xml.<linebreak/>
 You can optionally specify the addon id from another installed addon to retrieve settings from it.</para><para>example:<itemizedlist>
<listitem><para>self.Addon = xbmcaddon.Addon()</para></listitem><listitem><para>self.Addon = <ref refid="classXBMCAddon_1_1xbmcaddon_1_1Addon" kindref="compound">xbmcaddon.Addon</ref>(&apos;script.foo.bar&apos;) </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="9">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>CCriticalSection</label>
      </node>
      <node id="8">
        <label>XBMCAddon::xbmcaddon::Addon</label>
        <link refid="classXBMCAddon_1_1xbmcaddon_1_1Addon"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="12">
        <label>XBMCAddon::AddonClass</label>
        <link refid="classXBMCAddon_1_1AddonClass"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>languageHook</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>CCriticalSection</label>
      </node>
      <node id="14">
        <label>XBMCAddon::LanguageHook</label>
        <link refid="classXBMCAddon_1_1LanguageHook"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>XBMCAddon::xbmcaddon::Addon</label>
        <link refid="classXBMCAddon_1_1xbmcaddon_1_1Addon"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" line="52" column="1" bodyfile="/root/git-working/xbmc/xbmc/interfaces/legacy/Addon.h" bodystart="51" bodyend="132"/>
    <listofallmembers>
      <member refid="classXBMCAddon_1_1AddonClass_1ab70ccb0c1ca2f4099577e9ca59ae8f49" prot="public" virt="virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>Acquire</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a2d966feaa0a60148231bc3dbbcd15d6f" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>Addon</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a74bc7e400ada8647197d1575968f81d7" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>AddonClass</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1afd73e0ec1af35bf37e3e54971d23abd0" prot="protected" virt="virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>deallocating</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a38b04545f72570c0273c9c6be0083c79" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getAddonInfo</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a17a6801e1b23f1b375231f94b3a17f4d" prot="private" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getAddonVersion</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a55737a3a6205d2692484e186f1cc46d5" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>GetClassname</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a87a86d2605a977110aa26a35b964c065" prot="private" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getDefaultId</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a42cb67038af10d4b53c2e7a13ee22591" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>GetLanguageHook</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1ad71eb7d9fb09b9f598f51d41684eb7b2" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getLocalizedString</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1ae3c30a0f64241012499d1f4a6d5fdfe7" prot="protected" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getNextClassIndex</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1ac87e43c43bf816d5341a2aebec8ccf81" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getNumAddonClasses</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1af5f9d34edde325b181c73296549cf4f7" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>getSetting</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a218a8226c7ef2f361af6671a5f25efd0" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>isDeallocating</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1aa71b56d06a92152c726833de1308405e" prot="protected" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>languageHook</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a54738130dcd49aa5029c05ae52954c23" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>openSettings</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1a35819fa4077fe906852810c2e6f13378" prot="private" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>pAddon</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1a5c5ab8cbc38921ad05e9a853f1e52493" prot="public" virt="virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>Release</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1ab2360178f9b5ed6aa962c050ee2b28aa" prot="public" virt="non-virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>setSetting</name></member>
      <member refid="classXBMCAddon_1_1xbmcaddon_1_1Addon_1aa2da0222eb71dfc5816ecb1031edca68" prot="public" virt="virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>~Addon</name></member>
      <member refid="classXBMCAddon_1_1AddonClass_1ae27cdf6c5fab63f5d09e965e1573fce7" prot="public" virt="virtual"><scope>XBMCAddon::xbmcaddon::Addon</scope><name>~AddonClass</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
