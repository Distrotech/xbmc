<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.2">
  <compounddef id="namespaceXBMCAddon_1_1xbmcvfs" kind="namespace">
    <compoundname>XBMCAddon::xbmcvfs</compoundname>
    <innerclass refid="classXBMCAddon_1_1xbmcvfs_1_1File" prot="public">XBMCAddon::xbmcvfs::File</innerclass>
    <innerclass refid="classXBMCAddon_1_1xbmcvfs_1_1Stat" prot="public">XBMCAddon::xbmcvfs::Stat</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a262e70bb7b0a8c6e72cb4f5064921518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::copy</definition>
        <argsstring>(const String &amp;strSource, const String &amp;strDestnation)</argsstring>
        <name>copy</name>
        <param>
          <type>const String &amp;</type>
          <declname>strSource</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>strDestnation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>copy(source, destination) <ndash/> copy file to destination, returns true/false.</para><para>source : file to copy. destination : destination fi</para><para>example: success = xbmcvfs.copy(source, destination) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="36" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1ae9206752214c4c7693773dff12b522e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::deleteFile</definition>
        <argsstring>(const String &amp;strSource)</argsstring>
        <name>deleteFile</name>
        <param>
          <type>const String &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete(file)</para><para>file : file to dele</para><para>example: xbmcvfs.delete(file) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="43" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a0c61e5aa94db77b6ddbb3463bac5f84a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::rename</definition>
        <argsstring>(const String &amp;file, const String &amp;newFile)</argsstring>
        <name>rename</name>
        <param>
          <type>const String &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const String &amp;</type>
          <declname>newFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rename(file, newFileName)</para><para>file : file to reana newFileName : new filename, including the full pa</para><para>example: success = xbmcvfs.rename(file,newFileName) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="50" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="49" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a57892d91dadea995668fca2489f9244c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::exists</definition>
        <argsstring>(const String &amp;path)</argsstring>
        <name>exists</name>
        <param>
          <type>const String &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>exists(path)</para><para>path : file or folder (folder must end with slash or backslash)</para><para>example: success = xbmcvfs.exists(path) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="57" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="56" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a32b6b488c6a81a8688876d5100b43e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::mkdir</definition>
        <argsstring>(const String &amp;path)</argsstring>
        <name>mkdir</name>
        <param>
          <type>const String &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mkdir(path) <ndash/> Create a folder.</para><para>path : folder</para><para>example:<itemizedlist>
<listitem><para>success = xbmcvfs.mkdir(path) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="66" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a1e1d2de35b6da8d473c5b40a7758946b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::mkdirs</definition>
        <argsstring>(const String &amp;path)</argsstring>
        <name>mkdirs</name>
        <param>
          <type>const String &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>mkdirs(path) <ndash/> Create folder(s) - it will create all folders in the path.</para><para>path : folder</para><para>example:<itemizedlist>
<listitem><para>success = xbmcvfs.mkdirs(path) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="73" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1af25cf51648f1305386d8fe416dde9738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool XBMCAddon::xbmcvfs::rmdir</definition>
        <argsstring>(const String &amp;path, bool force)</argsstring>
        <name>rmdir</name>
        <param>
          <type>const String &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>rmdir(path) <ndash/> Remove a folder.</para><para>path : folder</para><para>example:<itemizedlist>
<listitem><para>success = xbmcvfs.rmdir(path)<linebreak/>
 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="79" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceXBMCAddon_1_1xbmcvfs_1a7698b757a1b7749c1a43cfc9a94753a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classXBMCAddon_1_1Tuple" kindref="compound">Tuple</ref>&lt; std::vector&lt; String &gt;, std::vector&lt; String &gt; &gt;</type>
        <definition>Tuple&lt; std::vector&lt; String &gt;, std::vector&lt; String &gt; &gt; XBMCAddon::xbmcvfs::listdir</definition>
        <argsstring>(const String &amp;path)</argsstring>
        <name>listdir</name>
        <param>
          <type>const String &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>listdir(path) <ndash/> lists content of a folder.</para><para>path : folder</para><para>example:<itemizedlist>
<listitem><para>dirs, files = xbmcvfs.listdir(path) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" line="85" bodyfile="/usr/src/xbmc/xbmc/interfaces/legacy/ModuleXbmcvfs.cpp" bodystart="84" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/usr/src/xbmc/xbmc/interfaces/legacy/File.cpp" line="28"/>
  </compounddef>
</doxygen>
